************Plans For Next Milestone*********************

Resolve lingering CSS issue (grid of container), nav link issue
Set up admin access, create dashboard
Make priority etc editable(crUd)
Finish app with Update and Destroy functions for cases

*****ROUGH NOTES FOR STUDY***********

serialise and deserialise

understand crypto lib
hash and salt and rfc


NB this is for Admins, good starting point for admin dashboard:

exports.getCase = async (req, res, next) => {
    //grab user from request 
    const testUser = await req.user;
    try {
      //Use model query that will allow us to search for the case no and confirm that the righ user is accessing this data 
      const searchedCase = await Case.findAll({
            where: {
                //req.params is passed through our anchor tag
                caseNo: req.params.caseNo,
                UserId: testUser.id            
            }
        })
        const { caseNo, caseDescription, title, priority, status, updatedAt } = searchedCase[0].dataValues
        let {caseNotes, caseMessage} = searchedCase[0].dataValues
        const commsArray = [{...emptyArr(caseNotes),facing:`internal`}, {...emptyArr(caseMessage),facing:`external`}]
        const messaages = commsArray.filter(item=>!item.facing)
        console.log(commsArray)
        //render a dynamic template passing in the data from our database
        res.render(`users/view-case`,{
            pageTitle: `Case ${caseNo}`,
            caseNo: caseNo,
            caseDesc: caseDescription,
            caseMessages: commsArray,
            messages: messaages,
            caseTitle: title,
            casePriority: priority,
            caseStatus: status,
            caseUpated: updatedAt
        })
    } catch (error) {
        console.log(error)
    }

}
